/*
* Name: Lee Seung Hwan
* Student ID#:2015146019
*/

import java.lang.Math;
import java.util.List;
import java.util.ArrayList;
/*
* Do NOT use any external packages/classes.
* If you (un)intentionally use them we did not provide,
* you will get 0.
* Also do NOT use auto-import function on IDEs.
* If the import statements change, you will also get 0.
*/

public final class Hash<K> implements IHash<K> {
    ArrayList<K> arr = new ArrayList<K>();
    IHashFunction<K> hfunc;
    IResizeFunction rfunc;
    int size;
    int count=0;
    /*
    * Use some variables for your implementation.
    */
    

    public Hash(int tablesize, IHashFunction<K> h, IResizeFunction ex) {
        size=tablesize;
        hfunc=h;
        rfunc=ex;
        for(int i =0; i < tablesize;i++){
            arr.add(0,null);
        }

        /*
         * Constructor
         * This function is an initializer for this class.
         * Input:
         *  + IHashFunction<K> h:
         *      int h.hash(K key, int tablesize): returns an integral hash value of key.
         *  + IResizeFunction ex:
         *      boolean ex.checkResize(int tablesize, int numItems): returns 'true' if the table must be extended for containing 'numItems' items. Otherwise, returns 'false'.
         *      int ex.extendTable(int tablesize): returns new tablesize for extended table.
         *  + tablesize: the initial table size of the hash table.
        */
    }

    @Override
    public void put(K key) throws IllegalStateException{
        int idx = hfunc.hash(key,size);
        for(int i =0;i<size;i++){

            if(arr.get(idx) == null){
                arr.set(idx,key);
                break;
            }
            else{
                idx=(idx+1)%size;
            }
        }
        count+=1;

        if(rfunc.checkResize(size,count)){
            count=size;
            size = rfunc.extendTable(size);
            ArrayList<K> narr = new ArrayList<K>();
            for(int i =0; i < size;i++){
                narr.add(0,null);
            }
            for(int i =0; i <arr.size();i++) {
                    int nidx = hfunc.hash(arr.get(i), size);
                    for (int j = 0; j < size; j++) {
                        if (narr.get(nidx) == null) {
                            narr.set(nidx, arr.get(i));
                            break;
                        } else {
                            nidx = (nidx + 1) % size;
                        }
                    }

            }


            arr=narr;
        }

        /**
         * Input:
         * + key: A key to be added
         *
         * Job:
         *  Add the key into the hashtable.
         *  If the table must be extended, extend the table and retry adding the key.
         *  If the key is already in the hashtable, ignore the request.
         *  To decide whether two keys are equal,
         *  you must use _key.equals_ method.
         */
    }

    @Override
    public void remove(K key) throws IllegalStateException {
        int a =0;
        for(int i =0; i < size;i++){

            if (arr.get(i)==key){
                a=1;
                arr.remove(i);
                arr.add(i,null);
                count=count-1;
            }
        }
        if(a==0){
            throw new IllegalStateException();
        }
        /*
        * Input:
        *  + key: A key to be removed
        *
        * Job:
        *  Delete the key from the hash table.
        *  To decide whether two keys are equal,
        *  you must use _key.equals_ method.
        *  If the key does not exist in the table, raise an exception.
        */
    }

    @Override
    public boolean exists(K key) {
        for(int i=0; i < size;i++){

            if(arr.get(i) == key){
                return true;
            }
        }
        /*
        * Input:
        *  + key: A key to be checked
        *
        * Job:
        *  Return true if the key is in the table; false otherwise.
        *  To decide whether two keys are equal,
        *  you must use _key.equals_ method.
        */
        return false;
    }

    @Override
    public int size() {
        /*
        * Job:
        *  Return the number of items in the hashtable.
        */
        return count;
    }

    @Override
    public int tablesize() {
        /*
        * Job:
        *  Return the size of current hashtable.
        */
        return size;
    }

    @Override
    public List<K> show() {
        /*
        * Job:
        *  Return the items in the hashtable.
        *  The list index must be the bucket index of the item.
        *  If a bucket has no item, assign null.
        *  Note that you can use ArrayList.
        */
        return arr;
    }

}
